<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<mappers>
		<!-- classpath 相对路径 -->
		<mapper resource="com/luoyunfan/conf/TimuMapper.xml"/>
		<mapper resource="com/luoyunfan/conf/StudentMapper.xml"/>
		<mapper resource="com/luoyunfan/conf/AdminMapper.xml"/>
		<mapper resource="com/luoyunfan/conf/PaperMapper.xml"/>
		<mapper resource="com/luoyunfan/conf/TestMapper.xml"/>
		<mapper resource="com/luoyunfan/conf/passTestMapper.xml"/>
	</mappers>
	<!-- 加载外部属性文件，其中的属性可以在整个配置文件中使用来替换需要动态配置的属性值 -->
	<!-- 属性也可以在SqlSessionFactoryBuilder.build(reader, props)中来加载 -->
	<!-- 通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。 -->
	<!-- <properties resource="com/luoyunfan/conf/config_mysql.properties">
		 
	</properties> -->

	<!-- 调整设置，改变 MyBatis的运行时行为 -->
	<!-- <settings>
		使全局的映射器启用或禁用缓存。
		<setting name="cacheEnabled" value="true" />
		指定 MyBatis 所用日志的具体实现，未指定时将自动查找。SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING
		日志会打印非常详细的内容，某些查询可能会返回大量的数据，只想记录其执行的SQL语句的话，可以将日志级别设为DEBUG
		<setting name="logImpl" value="LOG4J2" />

		是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN 到经典Java 属性名 aColumn 的类似映射。默认False
		<setting name="mapUnderscoreToCamelCase" value="true" />

	
	</settings>
  -->

	<!-- 类型处理器是在预处理语句（PreparedStatement）中设置一个参数时或者从结果集中取出一个值时， 用来将获取的值以合适的方式转换成 
		 Java 类型。 -->
	<!-- 可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型 -->
	<!--
		<typeHandlers> <typeHandler handler="org.mybatis.example.ExampleTypeHandler" /></typeHandlers> 
	-->

	<!-- MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 
		如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。 -->
	<!-- 
		<objectFactory type="org.mybatis.example.ExampleObjectFactory"> <property 
			name="someProperty" value="100" /> 
		</objectFactory> 
	-->

	<!-- MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多个数据库环境之中,例如，开发、测试和生产环境需要有不同的配置.尽管可以配置多个环境，每个 
		SqlSessionFactory 实例只能选择其一。 -->
	<!-- 默认的环境 ID, default="development" -->
	<!-- <environments default="development">
		<environment id="development">
			事务管理器的配置 ,在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）,Spring 
				+ MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置
			MyBatis的事务管理分为两种形式： 
					一、使用JDBC的事务管理机制：即利用java.sql.Connection对象完成对事务的提交（commit()）、回滚（rollback()）、关闭（close()）等 
					二、使用MANAGED的事务管理机制：这种机制MyBatis自身不会去实现事务管理，而是让其他容器如（Spring、Tomcat）来实现对事务的管理
			
			<transactionManager type="JDBC" />

			dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.user}" />
				<property name="password" value="${jdbc.pwd}" />
			</dataSource>
		</environment>
	</environments> -->

	<!-- MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 -->
	<!-- 这里的 DB_VENDOR 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。 
		   由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短，如下： -->

	<!-- <databaseIdProvider type="DB_VENDOR">
		<property name="SQL Server" value="sqlserver" />
		<property name="DB2" value="db2" />
		<property name="Oracle" value="oracle" />
	</databaseIdProvider>
 -->

	<!-- SQL 映射语句的位置 -->
	
		<!-- 绝对路径 -->
		<!--
			<mapper url="file:d:/com/demo/mybatis/step02/conf/UserMapper.xml" /> 
		-->

		<!-- 通过Mapper接口来指定 -->
		<!--
			<mapper class="com.demo.mybatis.step02.bo.UserMapper" /> 
		-->

		<!-- 包下的所有接口都注册为mapper -->
		<!--
			<package name="com.demo.mybatis.step02.bo" /> 
		-->
	
</configuration>